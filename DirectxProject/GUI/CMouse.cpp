#include "CGUI.h"

#define DBLCLICK_TIME 0.3f

// Generated by BreakPoint Software's Hex Workshop v6.8.0.5419
//   http://www.hexworkshop.com
//   http://www.bpsoft.com
//
//  Source File: C:\Users\DK\Desktop\TexturedQuads\Sem TÃ­tulo-1.png
//         Time: 21/10/2015 17:39
// Orig. Offset: 0 / 0x00000000
//       Length: 257 / 0x00000101 (bytes)
unsigned char rawData4 [ 257 ] =
{
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x06, 0x00, 0x00, 0x00, 0x3B, 0xD6, 0x95,
	0x4A, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
	0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00,
	0x7A, 0x25, 0x00, 0x00, 0x80, 0x83, 0x00, 0x00, 0xF9, 0xFF, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00,
	0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00, 0x3A, 0x98, 0x00, 0x00, 0x17, 0x6F, 0x92, 0x5F,
	0xC5, 0x46, 0x00, 0x00, 0x00, 0x87, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x94, 0x92, 0x3B, 0x0E,
	0xC5, 0x20, 0x0C, 0x04, 0xC7, 0x69, 0xB9, 0xFA, 0xAB, 0xC3, 0x49, 0x38, 0x1A, 0x15, 0xC5, 0xA6,
	0x48, 0xC8, 0x4B, 0x08, 0x5F, 0x4B, 0x2E, 0x00, 0xCF, 0xAE, 0xB0, 0x16, 0x49, 0xF4, 0x1A, 0xF8,
	0x01, 0x11, 0x50, 0xD1, 0x3B, 0x13, 0x70, 0x8C, 0x31, 0xAA, 0x2C, 0x40, 0x1B, 0xE3, 0xF2, 0xCE,
	0xB9, 0xFA, 0xCB, 0xC8, 0xF9, 0x72, 0xDF, 0xCF, 0xD1, 0xB7, 0xF3, 0x34, 0x18, 0x42, 0x50, 0x16,
	0x48, 0x29, 0x09, 0x48, 0xD3, 0x8E, 0xF7, 0x92, 0x9E, 0xE7, 0x15, 0xF0, 0x79, 0xDF, 0xDC, 0x76,
	0x0B, 0xAC, 0xCC, 0xFD, 0x95, 0x56, 0xC0, 0x0C, 0xB7, 0xFF, 0xD4, 0x01, 0x5F, 0x70, 0x06, 0x66,
	0xC1, 0x0F, 0xBC, 0x02, 0x56, 0xE1, 0x15, 0x01, 0xBB, 0xE0, 0x4F, 0xF2, 0xCC, 0x0C, 0x49, 0xD6,
	0xCB, 0xED, 0x06, 0x78, 0x33, 0xA3, 0x6C, 0xC0, 0x8F, 0x42, 0x7F, 0x0C, 0x00, 0xFC, 0x0D, 0xC5,
	0x78, 0xEB, 0x4E, 0x42, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60,
	0x82,
};

// Generated by BreakPoint Software's Hex Workshop v6.8.0.5419
//   http://www.hexworkshop.com
//   http://www.bpsoft.com
//
//  Source File: C:\Users\DK\Desktop\TexturedQuads\Sem TÃ­tulo-4.png
//         Time: 21/10/2015 17:45
// Orig. Offset: 0 / 0x00000000
//       Length: 257 / 0x00000101 (bytes)
unsigned char rawData3 [ 257 ] =
{
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x06, 0x00, 0x00, 0x00, 0x3B, 0xD6, 0x95,
	0x4A, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
	0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00,
	0x7A, 0x25, 0x00, 0x00, 0x80, 0x83, 0x00, 0x00, 0xF9, 0xFF, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00,
	0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00, 0x3A, 0x98, 0x00, 0x00, 0x17, 0x6F, 0x92, 0x5F,
	0xC5, 0x46, 0x00, 0x00, 0x00, 0x87, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x9C, 0x92, 0xC1, 0x0A,
	0xC3, 0x30, 0x0C, 0x43, 0x9F, 0x76, 0xF1, 0xEF, 0xEF, 0x94, 0x7E, 0xEB, 0x42, 0x40, 0xBB, 0xB4,
	0x90, 0x98, 0x2C, 0x4D, 0x27, 0xF0, 0xC5, 0x58, 0x0F, 0x21, 0x0C, 0x50, 0x00, 0xA7, 0xF9, 0x00,
	0x6F, 0xDB, 0xAC, 0x46, 0x80, 0x6D, 0xD3, 0xAB, 0xD6, 0x4A, 0x44, 0x54, 0xDB, 0xC1, 0x42, 0xAF,
	0xD9, 0x32, 0x22, 0x00, 0x0E, 0x36, 0xE4, 0x5E, 0x67, 0xEC, 0x72, 0x17, 0xF9, 0x4A, 0x3B, 0x18,
	0x9F, 0x00, 0xC8, 0x86, 0x27, 0x00, 0xBA, 0xB6, 0xCB, 0xB9, 0xD8, 0x06, 0xFC, 0x22, 0x6E, 0x01,
	0x56, 0x91, 0xA6, 0x80, 0x3E, 0xE9, 0x5D, 0x21, 0x65, 0xD9, 0xC9, 0x46, 0xA3, 0x83, 0xA1, 0xB5,
	0xB6, 0x6F, 0xCE, 0x80, 0xE1, 0x1F, 0xFE, 0x31, 0x5E, 0x66, 0xE5, 0xBF, 0xCE, 0x92, 0xE4, 0xD9,
	0x8D, 0xA4, 0xF9, 0x6F, 0x27, 0x1D, 0x92, 0xC8, 0x03, 0x1C, 0xDF, 0x01, 0x00, 0x18, 0x1C, 0xA3,
	0xAF, 0x47, 0x14, 0x47, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60,
	0x82,
};


// Generated by BreakPoint Software's Hex Workshop v6.8.0.5419
//   http://www.hexworkshop.com
//   http://www.bpsoft.com
//
//  Source File: C:\Users\DK\Desktop\TexturedQuads\Sem TÃ­tulo-2.png
//         Time: 21/10/2015 17:40
// Orig. Offset: 0 / 0x00000000
//       Length: 276 / 0x00000114 (bytes)
unsigned char rawData2 [ 276 ] =
{
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x15, 0x08, 0x06, 0x00, 0x00, 0x00, 0x94, 0x85, 0xC4,
	0xF0, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
	0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00,
	0x7A, 0x25, 0x00, 0x00, 0x80, 0x83, 0x00, 0x00, 0xF9, 0xFF, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00,
	0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00, 0x3A, 0x98, 0x00, 0x00, 0x17, 0x6F, 0x92, 0x5F,
	0xC5, 0x46, 0x00, 0x00, 0x00, 0x9A, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xCC, 0x92, 0xC1, 0x0A,
	0xC2, 0x30, 0x10, 0x44, 0xDF, 0x04, 0x2A, 0xFD, 0x7C, 0xE9, 0xA1, 0xFD, 0x54, 0x09, 0xD1, 0x1D,
	0x0F, 0x76, 0x35, 0x2D, 0x54, 0x8A, 0x27, 0x07, 0xF6, 0x32, 0x79, 0xCC, 0x6E, 0x92, 0xC5, 0x36,
	0x59, 0xC0, 0x04, 0x34, 0x60, 0xDA, 0xF8, 0x1D, 0x30, 0x03, 0x6E, 0xAD, 0x19, 0x30, 0x30, 0x6F,
	0xA0, 0x04, 0x7A, 0xF5, 0x20, 0xC0, 0x75, 0x0F, 0xEC, 0xC0, 0x49, 0x40, 0xAD, 0xB5, 0x5E, 0x22,
	0x82, 0x71, 0x1C, 0x49, 0x45, 0x04, 0x11, 0xC1, 0x30, 0x0C, 0xF7, 0x4C, 0xAA, 0xC0, 0x2D, 0x13,
	0xD7, 0x84, 0x47, 0x5E, 0x42, 0xD9, 0x13, 0x40, 0x92, 0x6D, 0x23, 0x09, 0xDB, 0x4A, 0xBF, 0x70,
	0x42, 0x7F, 0x0D, 0xE9, 0xA5, 0xEF, 0xD0, 0xE7, 0x91, 0x7F, 0x6C, 0xF7, 0xFE, 0xDC, 0x2C, 0xDB,
	0x2E, 0xA5, 0xB8, 0xF3, 0x66, 0xAD, 0x07, 0x87, 0x09, 0x92, 0x28, 0xC0, 0x72, 0x34, 0xF0, 0xEA,
	0x2F, 0xE7, 0xF6, 0x69, 0xBF, 0x99, 0x7B, 0x60, 0x03, 0xF5, 0x60, 0x0F, 0xD8, 0xE6, 0x39, 0x00,
	0x48, 0xFC, 0xC9, 0xF7, 0x25, 0xE7, 0x9B, 0x09, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44,
	0xAE, 0x42, 0x60, 0x82,
};

// Generated by BreakPoint Software's Hex Workshop v6.8.0.5419
//   http://www.hexworkshop.com
//   http://www.bpsoft.com
//
//  Source File: C:\Users\DK\Desktop\TexturedQuads\Sem TÃ­tulo-3.png
//         Time: 21/10/2015 18:16
// Orig. Offset: 0 / 0x00000000
//       Length: 206 / 0x000000CE (bytes)
unsigned char rawData1 [ 206 ] =
{
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x09, 0x08, 0x06, 0x00, 0x00, 0x00, 0xDD, 0x03, 0x67,
	0x76, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
	0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00,
	0x7A, 0x25, 0x00, 0x00, 0x80, 0x83, 0x00, 0x00, 0xF9, 0xFF, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00,
	0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00, 0x3A, 0x98, 0x00, 0x00, 0x17, 0x6F, 0x92, 0x5F,
	0xC5, 0x46, 0x00, 0x00, 0x00, 0x54, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xB4, 0x92, 0xC1, 0x0A,
	0x00, 0x20, 0x08, 0x43, 0xE7, 0xFF, 0xDF, 0xFD, 0xDD, 0x75, 0xC8, 0xC2, 0xB4, 0x83, 0x44, 0x0E,
	0x24, 0xD0, 0xF5, 0x10, 0x15, 0x38, 0xA5, 0x00, 0x68, 0x6F, 0x45, 0xDB, 0x4F, 0x12, 0x2B, 0x92,
	0x81, 0x33, 0xCB, 0x22, 0xD4, 0xFB, 0x35, 0x42, 0x37, 0xF0, 0x05, 0x1A, 0xC1, 0x09, 0xE8, 0x0C,
	0xA5, 0xB8, 0xFC, 0x53, 0xB1, 0x02, 0x7E, 0x49, 0x44, 0x7A, 0x3A, 0x6D, 0x9B, 0x69, 0xDB, 0xF6,
	0xBF, 0xDE, 0xE9, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x8F, 0x08, 0xC1, 0x07, 0x5D, 0x44,
	0x53, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82,
};

// Generated by BreakPoint Software's Hex Workshop v6.8.0.5419
//   http://www.hexworkshop.com
//   http://www.bpsoft.com
//
//  Source File: C:\Users\DK\Desktop\TexturedQuads\set.png
//         Time: 21/10/2015 18:17
// Orig. Offset: 0 / 0x00000000
//       Length: 508 / 0x000001FC (bytes)
unsigned char rawData [ 508 ] =
{
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x15, 0x08, 0x06, 0x00, 0x00, 0x00, 0x72, 0xAC, 0x0F,
	0xB4, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
	0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00,
	0x7A, 0x25, 0x00, 0x00, 0x80, 0x83, 0x00, 0x00, 0xF9, 0xFF, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00,
	0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00, 0x3A, 0x98, 0x00, 0x00, 0x17, 0x6F, 0x92, 0x5F,
	0xC5, 0x46, 0x00, 0x00, 0x01, 0x82, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xB4, 0x92, 0x5D, 0x8F,
	0xA2, 0x30, 0x14, 0x86, 0xDF, 0x22, 0x28, 0x10, 0x41, 0x01, 0xBD, 0xD9, 0xFF, 0xFF, 0xE3, 0x34,
	0x31, 0x51, 0xD0, 0x00, 0x85, 0xB6, 0xCF, 0x5C, 0xCC, 0x60, 0xE2, 0xB8, 0xBB, 0x93, 0xBD, 0xD8,
	0x37, 0x39, 0x69, 0x7A, 0xD2, 0xE7, 0xF4, 0x7C, 0xA9, 0xAE, 0x6B, 0xFA, 0xBE, 0x17, 0x20, 0x40,
	0xD3, 0x34, 0x29, 0x84, 0x20, 0x40, 0xCE, 0xB9, 0xA7, 0x7F, 0x31, 0xA5, 0x69, 0x4A, 0x9E, 0xE7,
	0xB4, 0x6D, 0xAB, 0x69, 0x9A, 0x04, 0x68, 0x1C, 0x47, 0x01, 0xF2, 0xDE, 0xBF, 0x03, 0xBB, 0xDD,
	0x8E, 0x61, 0x18, 0xA8, 0xAA, 0x8A, 0xE5, 0x07, 0x40, 0xD6, 0xDA, 0xB7, 0xC7, 0x80, 0x22, 0x40,
	0x7D, 0xDF, 0xEB, 0x72, 0xB9, 0x28, 0xCF, 0x73, 0xE2, 0x38, 0x96, 0x24, 0x2D, 0xE7, 0x9B, 0xB6,
	0xDB, 0x2D, 0x8B, 0x1E, 0x8F, 0x07, 0xDF, 0x6B, 0x5A, 0xEA, 0x79, 0xA6, 0xD4, 0x34, 0x0D, 0xD7,
	0xEB, 0x95, 0x10, 0x02, 0x00, 0x21, 0x04, 0xCA, 0xB2, 0x64, 0x9E, 0x67, 0x8D, 0xE3, 0xA8, 0x10,
	0xC2, 0x0B, 0xA4, 0xA2, 0x28, 0x00, 0xF0, 0xDE, 0xE3, 0x9C, 0xC3, 0x5A, 0x8B, 0xB5, 0x96, 0xAA,
	0xAA, 0x70, 0xCE, 0xC9, 0x7B, 0x2F, 0xEF, 0xFD, 0x13, 0x8A, 0x8C, 0x31, 0x1A, 0xC7, 0x51, 0x92,
	0xB4, 0x5A, 0xAD, 0xB4, 0x5E, 0xAF, 0x05, 0xE8, 0x7C, 0x3E, 0xEB, 0x78, 0x3C, 0x02, 0xBC, 0x94,
	0x10, 0x01, 0x8A, 0xA2, 0xE8, 0xE9, 0x58, 0xEE, 0x49, 0x92, 0xE8, 0x74, 0x3A, 0xA9, 0xAA, 0x2A,
	0xA2, 0x28, 0x7A, 0x76, 0x2D, 0x32, 0xC6, 0x7C, 0x92, 0x5F, 0x10, 0xA0, 0x24, 0x49, 0x34, 0x0C,
	0x83, 0x56, 0xAB, 0x95, 0x6E, 0xB7, 0x9B, 0xB2, 0x2C, 0x23, 0x8E, 0x63, 0x19, 0x63, 0x3E, 0x81,
	0x25, 0x82, 0x24, 0x19, 0x63, 0xE4, 0x9C, 0x53, 0x96, 0x65, 0x02, 0xF4, 0x78, 0x3C, 0x74, 0xB9,
	0x5C, 0xD4, 0x34, 0x0D, 0xC3, 0x30, 0x28, 0x06, 0x34, 0xCF, 0xB3, 0xB2, 0x2C, 0x93, 0x24, 0x85,
	0x10, 0x54, 0x96, 0xA5, 0x00, 0xC5, 0x71, 0x2C, 0x40, 0x9B, 0xCD, 0x46, 0xD3, 0x34, 0xE9, 0x70,
	0x38, 0xA0, 0xA2, 0x28, 0xB0, 0xD6, 0xE2, 0xBD, 0xA7, 0xEB, 0x3A, 0xF6, 0xFB, 0x3D, 0x92, 0x7E,
	0x49, 0x4A, 0xBE, 0x6C, 0xBD, 0xA4, 0x3A, 0xCF, 0xB3, 0x54, 0xD7, 0x35, 0x5D, 0xD7, 0xE1, 0x9C,
	0xA3, 0xAE, 0x6B, 0x7E, 0xB7, 0x0E, 0x2F, 0x83, 0xDB, 0x6C, 0x36, 0x8C, 0xE3, 0x48, 0x9E, 0xE7,
	0xDC, 0xEF, 0x77, 0xFD, 0x08, 0xEC, 0xF7, 0x7B, 0xD2, 0x34, 0xC5, 0x5A, 0xFB, 0xB6, 0x06, 0x7F,
	0x5C, 0xBE, 0xB6, 0x6D, 0x8D, 0x31, 0x46, 0x4B, 0x8B, 0xFF, 0x26, 0xF3, 0x7D, 0x92, 0x3F, 0x29,
	0xD2, 0x3F, 0xEA, 0xFF, 0x03, 0x1F, 0x03, 0x00, 0x49, 0xDD, 0xA5, 0x78, 0x24, 0xE4, 0xD9, 0x1D,
	0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82,
};

CMouse::CMouse ( CDialog *pDialog )
{
	m_pDialog = pDialog;
	m_eCursorType = DEFAULT;

	m_pDialog->LoadTexture ( _UI("FMPGUI/Untitled-2.png"), &m_pTexture [ DEFAULT ] );
	m_pDialog->LoadTexture ( _UI ( "FMPGUI/Semtulo-3.png"), &m_pTexture [ E_RESIZE ] );
	m_pDialog->LoadTexture ( _UI ( "FMPGUI/Semtulo-4.png"), &m_pTexture [ NE_RESIZE ] );
	m_pDialog->LoadTexture ( _UI ( "FMPGUI/Semtulo-2.png"), &m_pTexture [ S_RESIZE ] );
	m_pDialog->LoadTexture ( _UI ( "FMPGUI/Semtulo-1.png"), &m_pTexture [ SE_RESIZE ] );
	m_pDialog->LoadTexture ( _UI ( "FMPGUI/move_cursor.png"), &m_pTexture [ MOVE ] );

	SetSize ( 12 );

	SetLeftButton ( 0 );
	SetRightButton ( 0 );
	SetMiddleButton ( 0 );
	SetWheel ( 0 );

	SetDragging ( 0 );
}

CMouse::~CMouse ( void )
{
	for ( size_t i = 0; i < 5; i++ )
		m_pDialog->RemoveTexture ( m_pTexture [ i ] );
}

bool CMouse::HandleMessage ( UINT uMsg, WPARAM wParam, LPARAM lParam )
{
	if ( !m_pDialog->IsVisible () || uMsg < WM_MOUSEFIRST || uMsg > WM_MOUSELAST )
		return false;

	switch ( uMsg )
	{
		case WM_MOUSEMOVE:
		{
			SetPos ( GET_X_LPARAM ( lParam ), GET_Y_LPARAM ( lParam ) );
			return false;
		}

		case WM_LBUTTONDOWN:
			SetLeftButton ( 1 );
			break;
		case WM_RBUTTONDOWN:
			SetRightButton ( 1 );
			break;
		case WM_MBUTTONDOWN:
			SetMiddleButton ( 1 );
			break;
		case WM_LBUTTONUP:
			SetLeftButton ( 0 );
			break;
		case WM_RBUTTONUP:
			SetRightButton ( 0 );
			break;
		case WM_MBUTTONUP:
			SetMiddleButton ( 0 );
			break;

		case WM_MOUSEWHEEL:
			float fDelta = GET_WHEEL_DELTA_WPARAM ( wParam );

			if ( fDelta > 0.0f )
				SetWheel ( 1 );
			else if ( fDelta < 0.0f )
				SetWheel ( 2 );
			else
				SetWheel ( 0 );
			break;

	}

	return false;
}

void CMouse::SetPos ( CPos cPos )
{
	m_Pos = cPos;
}

void CMouse::SetPos(int iX, int iY)
{
	m_Pos.m_nX = iX;
	m_Pos.m_nY = iY;
}

CPos CMouse::GetPos ( void )
{
	return m_Pos;
}

void CMouse::Draw ()
{
	if ( m_eCursorType == S_RESIZE )
		m_pTexture [ m_eCursorType ]->Draw ( m_Pos.m_nX - 4, m_Pos.m_nY - 8 );
	else if ( m_eCursorType == N_RESIZE )
		m_pTexture [ S_RESIZE ]->Draw ( m_Pos.m_nX - 4, m_Pos.m_nY - 10 );
	else if ( m_eCursorType == E_RESIZE )
		m_pTexture [ m_eCursorType ]->Draw ( m_Pos.m_nX - 8, m_Pos.m_nY - 4 );
	else if ( m_eCursorType == NE_RESIZE )
		m_pTexture [ m_eCursorType ]->Draw ( m_Pos.m_nX - 5, m_Pos.m_nY - 5 );
	else if ( m_eCursorType == SE_RESIZE )
		m_pTexture [ m_eCursorType ]->Draw ( m_Pos.m_nX - 6, m_Pos.m_nY - 4 );
	else if ( m_eCursorType == MOVE )
		m_pTexture [ m_eCursorType ]->Draw ( m_Pos.m_nX - 5, m_Pos.m_nY - 5 );
	else
		m_pTexture [ m_eCursorType ]->Draw ( m_Pos.m_nX, m_Pos.m_nY);
}

int CMouse::GetLeftButton ( int iState )
{
	int iRet = m_iLeftButton;

	if ( iState != -1 )
		SetLeftButton ( iState );

	return iRet;
}

int CMouse::GetRightButton ( int iState )
{
	int iRet = m_iRightButton;

	if ( iState != -1 )
		SetRightButton ( iState );

	return iRet;
}

int CMouse::GetMiddleButton ( int iState )
{
	int iRet = m_iMiddleButton;

	if ( iState != -1 )
		SetMiddleButton ( iState );

	return iRet;
}

int CMouse::GetWheel ( int iState )
{
	int iRet = m_iWheel;

	if ( iState != -1 )
		SetWheel ( iState );

	return iRet;
}

void CMouse::SetLeftButton ( int iState )
{
	if ( iState == 1 )
	{
		if ( m_tLeftButton.Running () )
		{
			m_iLeftButton = 2;
			m_tLeftButton.Stop ();
		}
		else
		{
			m_iLeftButton = 1;
			m_tLeftButton.Start ( DBLCLICK_TIME );
		}
	}
	else
		m_iLeftButton = iState;
}

void CMouse::SetRightButton ( int iState )
{
	if ( iState == 1 )
	{
		if ( m_tRightButton.Running () )
		{
			m_iRightButton = 2;
			m_tRightButton.Stop ();
		}
		else
		{
			m_iRightButton = 1;
			m_tRightButton.Start ( DBLCLICK_TIME );
		}
	}
	else
		m_iRightButton = iState;
}

void CMouse::SetMiddleButton ( int iState )
{
	if ( iState == 1 )
	{
		if ( m_tMiddleButton.Running () )
		{
			m_iMiddleButton = 2;
			m_tMiddleButton.Stop ();
		}
		else
		{
			m_iMiddleButton = 1;
			m_tMiddleButton.Start ( DBLCLICK_TIME );
		}
	}
	else
		m_iMiddleButton = iState;
}

void CMouse::SetWheel ( int iState )
{
	m_iWheel = iState;
}

void CMouse::SetDragging ( CWindow *pWindow )
{
	m_pWindow = pWindow;
}

CWindow *CMouse::GetDragging ( void )
{
	return m_pWindow;
}

void CMouse::SavePos ( void )
{
	m_SavedPos = m_Pos;
}

void CMouse::LoadPos ( void )
{
	m_Pos = m_SavedPos;
}

CPos CMouse::GetSavedPos ( void)
{
	return m_SavedPos;
}

void CMouse::SetSize ( int iSize )
{
	m_iSize = iSize;
}